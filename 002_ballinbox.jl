using Statistics
using Random
using Plots

abstract type ProbabilisticEvent end
abstract type ProbabilisticBox <: ProbabilisticEvent end
abstract type ProbabilisticBall <: ProbabilisticEvent end
struct BallRed <: ProbabilisticBall end
struct BallBlue <: ProbabilisticBall end
struct BoxWhite <: ProbabilisticBox end
struct BoxBlack <: ProbabilisticBox end
struct Conditional{A,B} <: ProbabilisticEvent where A <: ProbabilisticEvent where B <: ProbabilisticEvent
    a::A
    b::B
end
Base.:|(a::ProbabilisticEvent,b::ProbabilisticEvent)=Conditional(a,b)
struct Sequence <: ProbabilisticEvent
    s::Vector{<:ProbabilisticEvent}
end
iterate(s::Sequence) = iterate(s.s)

ğŸ”´ = BallRed()
ğŸ”µ = BallBlue()
â¬œ = BoxWhite()
â¬› = BoxBlack()

P(::BoxWhite) = 2/5
P(::BoxBlack) = 3/5
P(::typeof(ğŸ”´|â¬œ)) = 2/3
P(::typeof(ğŸ”µ|â¬œ)) = 1/3
P(::typeof(ğŸ”´|â¬›)) = 1/4
P(::typeof(ğŸ”µ|â¬›)) = 3/4
P(ğŸ”´::ProbabilisticBall) = P(ğŸ”´|â¬œ)*P(â¬œ) + P(ğŸ”´|â¬›)*P(â¬›) # = P(ğŸ”´âˆ©â¬œ) + P(ğŸ”´âˆ©â¬›)
P(s::Sequence) = prod(P.(s.s))
function P(c::Conditional{<:ProbabilisticBox,Sequence})
    box = c.a
    x = c.b
    return P(x|box)*P(box)/(P(x|â¬œ)*P(â¬œ)+P(x|â¬›)*P(â¬›))
end

Conditional(s::Sequence, box::ProbabilisticBox) = Sequence((x->x|box).(s.s))

P(ğŸ”´|â¬œ)
P(ğŸ”´)
P(ğŸ”µ)
P(ğŸ”´)+P(ğŸ”µ)

P(Sequence([ğŸ”´,ğŸ”µ,ğŸ”µ]))
P(ğŸ”´)*P(ğŸ”µ)^2

P(Sequence([ğŸ”´,ğŸ”µ,ğŸ”µ])|â¬œ)
P(Sequence([ğŸ”´|â¬œ,ğŸ”µ|â¬œ,ğŸ”µ|â¬œ]))

for box in [â¬œ, â¬›]
    @eval function sampling(::typeof($box))
        rand() < P(ğŸ”´|$box) && return ğŸ”´
        return ğŸ”µ
    end

    @eval function sampling(::typeof($box), n::Int)
        return Sequence([sampling($box) for _ in 1:n])
    end
end

function sampling()
    rand() < P(â¬œ) && return sampling(â¬œ)
    return sampling(â¬›)
end

function sampling(n::Int)
    return Sequence([sampling() for _ in 1:n])
end

n = 10

x = sampling(â¬œ,n)
count(==(ğŸ”´), x.s) / n
count(==(ğŸ”µ), x.s) / n
P(ğŸ”´|â¬œ)
P(ğŸ”µ|â¬œ)

y = sampling(â¬›,n)
count(==(ğŸ”´), y.s) / n
count(==(ğŸ”µ), y.s) / n
P(ğŸ”´|â¬›)
P(ğŸ”µ|â¬›)

z = sampling(n)
count(==(ğŸ”´), z.s) / n
count(==(ğŸ”µ), z.s) / n
P(ğŸ”´)
P(ğŸ”µ)


P(â¬œ|x)
P(â¬›|x)
